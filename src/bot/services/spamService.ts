import { Context } from 'grammy'
import { Message } from 'grammy/types'

import { cancelAdminKb } from '../utils/keyboardBuilder'
import parseMessageBtns from '../utils/parseMessageBtns'
import {
  getUserCount,
  getUsersBatch,
  setUserState,
} from '../../db/methods'

const guideText = `<blockquote expandable>üî∞ –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ä–∞–∑–º–µ—Ç–∫—É –∫–Ω–æ–ø–æ–∫. 
<b>–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –∫–Ω–æ–ø–∫–∞–º–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –ø–µ—Ä–µ–Ω–æ—Å (–ø—Ä–∏–º–µ—Ä –Ω–∏–∂–µ):</b>

["–ª—é–±–∞—è_—Å—Å—ã–ª–∫–∞", "—Å—Ç—Ä–æ–∫–∞1"]

["–ª—é–±–∞—è_—Å—Å—ã–ª–∫–∞", "—Å—Ç—Ä–æ–∫–∞2"]
["–ª—é–±–∞—è_—Å—Å—ã–ª–∫–∞", "—Å—Ç—Ä–æ–∫–∞2"]</blockquote>`

export async function spamInputWait(ctx: Context) {
  await setUserState(ctx.from!.id, 'prospam_all')

  await ctx.reply(
    `üì§ –†–ê–°–°–´–õ–ö–ê –ü–û –í–°–ï–ú
–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: üë§ ${await getUserCount()}
–ñ–¥—É –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
${guideText}`,
    {
      reply_markup: cancelAdminKb,
    }
  )
}

export async function msgSpamAll(ctx: Context) {
  const batchSize = 100
  let offset = 0
  let sent = 0

  const msg = ctx.message!

  let sendFn: (userId: number) => Promise<Message>

  if (msg.photo) {
    const { text, keyboard } = parseMessageBtns(msg.caption || '')
    sendFn = async (userId) =>
      ctx.api.sendPhoto(userId, msg.photo!.at(-1)!.file_id, {
        caption: text,
        reply_markup: keyboard,
      })
  } else if (msg.video) {
    const { text, keyboard } = parseMessageBtns(msg.caption || '')
    sendFn = async (userId) =>
      ctx.api.sendVideo(userId, msg.video!.file_id, {
        caption: text,
        reply_markup: keyboard,
      })
  } else if (msg.animation) {
    const { text, keyboard } = parseMessageBtns(msg.caption || '')
    sendFn = async (userId) =>
      ctx.api.sendAnimation(userId, msg.animation!.file_id, {
        caption: text,
        reply_markup: keyboard,
      })
  } else if (msg.text) {
    const { text, keyboard } = parseMessageBtns(msg.text)
    sendFn = async (userId) =>
      ctx.api.sendMessage(userId, text, {
        reply_markup: keyboard,
      })
  } else {
    await ctx.reply('‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ')
    return
  }

  while (true) {
    const users = await getUsersBatch(offset, batchSize)
    if (users.length === 0) break

    for (const user of users) {
      try {
        await sendFn(user.user_id)
        sent++
        await wait(30)
      } catch (err) {}
    }

    offset += batchSize
    await wait(500)
  }

  await ctx.reply(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${sent}`)
}

function wait(ms: number): Promise<void> {
  return new Promise((resolve) => setTimeout(resolve, ms))
}
