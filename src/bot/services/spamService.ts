import { Context } from 'grammy'
import { cancelAdminKb } from '../utils/keyboardBuilder'
import parseMessageBtns from '../utils/parseMessageBtns'
import {
  getUserCount,
  getUsersBatch,
  setUserState,
} from '../../db/methods'

const guideText = `<blockquote expandable>üî∞ –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ä–∞–∑–º–µ—Ç–∫—É –∫–Ω–æ–ø–æ–∫. 
<b>–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –∫–Ω–æ–ø–∫–∞–º–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –ø–µ—Ä–µ–Ω–æ—Å (–ø—Ä–∏–º–µ—Ä –Ω–∏–∂–µ):</b>

["–ª—é–±–∞—è_—Å—Å—ã–ª–∫–∞", "—Å—Ç—Ä–æ–∫–∞1"]

["–ª—é–±–∞—è_—Å—Å—ã–ª–∫–∞", "—Å—Ç—Ä–æ–∫–∞2"]
["–ª—é–±–∞—è_—Å—Å—ã–ª–∫–∞", "—Å—Ç—Ä–æ–∫–∞2"]</blockquote>`

export async function spamInputWait(ctx: Context) {
  await setUserState(ctx.from!.id, 'prospam_all')

  await ctx.reply(
    `üì§ –†–ê–°–°–´–õ–ö–ê –ü–û –í–°–ï–ú
–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: üë§ ${await getUserCount()}
–ñ–¥—É –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
${guideText}`,
    {
      reply_markup: cancelAdminKb(),
    }
  )
}

export async function msgSpamAll(ctx: Context) {
  const batchSize = 100
  let offset = 0
  let sent = 0

  while (true) {
    const users = await getUsersBatch(offset, batchSize)
    if (users.length === 0) break

    const msg = ctx.message!
    for (const user of users) {
      try {
        if (msg.photo) {
          const { text, keyboard } = parseMessageBtns(
            ctx.message!.caption!
          )

          await ctx.api.sendPhoto(
            user.user_id,
            msg.photo.at(-1)!.file_id,
            {
              caption: text,
              reply_markup: keyboard,
            }
          )
        } else if (msg.video) {
          const { text, keyboard } = parseMessageBtns(
            ctx.message!.caption!
          )

          await ctx.api.sendVideo(user.user_id, msg.video.file_id, {
            caption: text,
            reply_markup: keyboard,
          })
        } else {
          const { text, keyboard } = parseMessageBtns(
            ctx.message!.text!
          )

          await ctx.api.sendMessage(user.user_id, text, {
            reply_markup: keyboard,
          })
        }
        sent++
        await wait(30)
      } catch (err: any) {
        if (err.error_code === 403) {
          // –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
        } else if (err.error_code === 429) {
          const delay = err.parameters?.retry_after ?? 5
          console.log(`‚è≥ –§–ª—É–¥–∫–æ–Ω—Ç—Ä–æ–ª—å: –ø–∞—É–∑–∞ ${delay}s`)
          await wait(delay * 1000)
        } else {
          console.error(`‚ùå –û—à–∏–±–∫–∞ user ${user.user_id}:`, err)
        }
      }
    }

    offset += batchSize
    await wait(500) // –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞—á–∫–∞–º–∏
  }

  ctx.reply(`‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${sent}`)
}

function wait(ms: number): Promise<void> {
  return new Promise((resolve) => setTimeout(resolve, ms))
}
