import { Context, InlineKeyboard } from 'grammy'
import {
  addChannel,
  checkUser,
  deleteChannel,
} from '../../db/methods'
import validateId from '../utils/validateId'
import { parseCallbackData } from '../utils/parseCallBack'

export async function channelMenu(ctx: Context) {
  const channelId = parseCallbackData(ctx.callbackQuery!.data!)

  const channelData = await ctx.api.getChat(validateId(channelId))
  const channel = await ctx.api.getChat(channelId)

  await ctx.reply(
    `–ö–∞–Ω–∞–ª: <a href='${
      channel.username
        ? `https://t.me/${channel.username}/`
        : channel.invite_link
    }'>${channelData.title ? channelData.title : '‚ùì'}</a>`,
    {
      reply_markup: new InlineKeyboard()
        .text('‚ùå –£–¥–∞–ª–∏—Ç—å', `del-${channelId}`)
        .row()
        .text('–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é ‚§µÔ∏è', `adminMenu`),
    }
  )
}

export async function handleAddChannel(ctx: Context) {
  //@ts-ignore
  const channelId = ctx.message!.forward_origin!.chat.id
  const channel = await ctx.api.getChat(channelId)

  if (!channel.username && !channel.invite_link) {
    await ctx.reply(`üîê –ö–ê–ù–ê–õ –ü–†–ò–í–ê–¢–ù–´–ô ‚ÄºÔ∏è
–ë–æ—Ç—É –Ω—É–∂–Ω–∞ –∞–¥–º–∏–Ω–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —é–∑–µ—Ä–æ–≤`)
  } else {
    await addChannel(channelId)
    await ctx.reply(`<b>‚úÖ –î–û–ë–ê–í–õ–ï–ù –∫–∞–Ω–∞–ª <a href='${
      channel.username
        ? `https://t.me/${channel.username}/`
        : channel.invite_link
    }'>${channel.title}</a></b>
`)
  }
}

export async function handleDeleteChannel(ctx: Context) {
  const user = await checkUser(ctx.from!.id)

  if (!user?.is_admin) {
    return ctx.reply('‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ.')
  }

  const data = ctx.callbackQuery?.data
  if (!data?.startsWith('del-')) return

  const channelId = data.replace('del-', '')

  const channel = await ctx.api.getChat(validateId(channelId))
  await deleteChannel(channelId)

  await ctx.reply(
    `<b>‚ùå –ö–ê–ù–ê–õ –£–î–ê–õ–Å–ù: <a href='${
      channel.username
        ? `https://t.me/${channel.username}/`
        : channel.invite_link || ''
    }'>${channel.title}</a></b>`
  )
}

export async function channelInputWait(ctx: Context) {
  const { id } = ctx.from!

  const user = await checkUser(id)
  if (!user?.is_admin) {
    await ctx.reply('‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ.')
    return
  }

  await ctx.reply(
    `<b>üìä –î–û–ë–ê–í–õ–ï–ù–ò–ï –ö–ê–ù–ê–õ–ê ü§ñ</b>
<blockquote>üì© –ø–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞.

<b>‚ùóÔ∏è–¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –Ω—É–∂–Ω–æ –≤—ã–¥–∞—Ç—å –±–æ—Ç—É –ø—Ä–∞–≤–∞ –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b></blockquote>
`,
    {
      reply_markup: new InlineKeyboard().text(
        '–û—Ç–º–µ–Ω–∏—Ç—å',
        'adminMenu'
      ),
    }
  )
}
