import { Context } from 'grammy'
import { addAdmin, deleteAdmin, setUserState } from '../../db/methods'
import { parseCommandArgs } from '../utils/parseCommandArgs'
import {
  adminChannels,
  editAdminsKeyboard,
} from '../utils/keyboardBuilder'
import { parseCallbackData } from '../utils/parseCallBack'

export async function adminMenu(ctx: Context) {
  await setUserState(ctx.from!.id, 'none')

  await ctx.reply(
    `–ú–ï–ù–Æ –ê–î–ú–ò–ù–ê
üìä –ü–†–ò–í–Ø–ó–ê–ù–ù–´–ï –ö–ê–ù–ê–õ–´

/dump - –¥–∞–º–ø –≤—Å–µ–π –±–∞–∑—ã –≤ JSON —Ñ–æ—Ä–º–∞—Ç (–¥–ª—è —É–¥–æ–±–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–∫—Ä–∏–ø—Ç–æ–º –∏–∑–≤–Ω–µ –∏–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞)
`,
    {
      reply_markup: await adminChannels(ctx),
    }
  )
}

export async function adminsList(ctx: Context) {
  await ctx.reply('–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤', {
    reply_markup: await editAdminsKeyboard(ctx),
  })
}

export async function handleAddAdmin(ctx: Context) {
  const arg = parseCommandArgs(ctx.message?.text)
  await addAdmin(Number(arg))
  await ctx.reply(`–ê–¥–º–∏–Ω ${arg} –¥–æ–±–∞–≤–ª–µ–Ω!`)
}

export async function handleDeleteAdmin(ctx: Context) {
  const data = ctx.callbackQuery!.data!

  const adminId = Number(parseCallbackData(data))
  const success = await deleteAdmin(adminId)

  if (success) {
    await ctx.reply(`‚úÖ –ê–¥–º–∏–Ω ${adminId} —É–¥–∞–ª—ë–Ω!`)
  } else {
    await ctx.reply(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞ ${adminId}.`)
  }
}
